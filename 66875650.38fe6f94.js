(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{272:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(1),i=n(9),r=(n(0),n(489)),o={id:"stack-navigator",title:"StackNavigator reference",sidebar_label:"StackNavigator"},c={id:"version-1.x/stack-navigator",title:"StackNavigator reference",description:"Provides a way for your app to transition between screens where each new screen is placed on top of a stack.",source:"@site/versioned_docs/version-1.x/stack-navigator.md",permalink:"/docs/1.x/stack-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/source/versioned_docs/version-1.x/stack-navigator.md",version:"1.x",sidebar_label:"StackNavigator",sidebar:"api",previous:{title:"NavigationActions reference",permalink:"/docs/1.x/navigation-actions"},next:{title:"SwitchNavigator reference",permalink:"/docs/1.x/switch-navigator"}},l=[{value:"API Definition",id:"api-definition",children:[{value:"RouteConfigs",id:"routeconfigs",children:[]},{value:"StackNavigatorConfig",id:"stacknavigatorconfig",children:[]},{value:"<code>navigationOptions</code> used by <code>StackNavigator</code>",id:"navigationoptions-used-by-stacknavigator",children:[]},{value:"Navigator Props",id:"navigator-props",children:[]},{value:"Examples",id:"examples",children:[]}]},{value:"Navigator props",id:"navigator-props-1",children:[]}],b={rightToc:l};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Provides a way for your app to transition between screens where each new screen is placed on top of a stack."),Object(r.b)("p",null,"By default the StackNavigator is configured to have the familiar iOS and Android look & feel: new screens slide in from the right on iOS, fade in from the bottom on Android. On iOS the StackNavigator can also be configured to a modal style where screens slide in from the bottom."),Object(r.b)("h2",{id:"api-definition"},"API Definition"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"StackNavigator(RouteConfigs, StackNavigatorConfig);\n")),Object(r.b)("h3",{id:"routeconfigs"},"RouteConfigs"),Object(r.b)("p",null,"The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"StackNavigator({\n  // For each screen that you can navigate to, create a new entry like this:\n  Profile: {\n    // `ProfileScreen` is a React component that will be the main content of the screen.\n    screen: ProfileScreen,\n    // When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.\n\n    // Optional: When deep linking or using react-navigation in a web app, this path is used:\n    path: 'people/:name',\n    // The action and route params are extracted from the path.\n\n    // Optional: Override the `navigationOptions` for the screen\n    navigationOptions: ({ navigation }) => ({\n      title: `${navigation.state.params.name}'s Profile'`,\n    }),\n  },\n\n  ...MyOtherRoutes,\n});\n")),Object(r.b)("h3",{id:"stacknavigatorconfig"},"StackNavigatorConfig"),Object(r.b)("p",null,"Options for the router:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialRouteName")," - Sets the default screen of the stack. Must match one of the keys in route configs."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"initialRouteParams")," - The params for the initial route"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"navigationOptions")," - Default navigation options to use for screens"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"paths")," - A mapping of overrides for the paths set in the route configs")),Object(r.b)("p",null,"Visual options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"mode")," - Defines the style for rendering and transitions:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"card")," - Use the standard iOS and Android screen transitions. This is the default."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"modal")," - Make the screens slide in from the bottom which is a common iOS pattern. Only works on iOS, has no effect on Android."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"headerMode")," - Specifies how the header should be rendered:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"float")," - Render a single header that stays at the top and animates as screens are changed. This is a common pattern on iOS."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"screen")," - Each screen has a header attached to it and the header fades in and out together with the screen. This is a common pattern on Android."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"none")," - No header will be rendered."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"headerTransitionPreset")," - Specifies how the header should transition from one screen to another when ",Object(r.b)("inlineCode",{parentName:"li"},"headerMode: float")," is enabled.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"fade-in-place")," - Header components cross-fade without moving, similar to the Twitter, Instagram, and Facebook app for iOS. This is the default value."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"uikit")," - An approximation of the default behavior for iOS."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"cardStyle")," - Use this prop to override or extend the default style for an individual card in stack."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"transitionConfig")," - Function to return an object that is merged with the default screen transitions (take a look at TransitionConfig in ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/react-navigation/react-navigation/blob/1.x/flow/react-navigation.js"}),"type definitions"),"). Provided function will be passed the following arguments:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"transitionProps")," - Transition props for the new screen."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"prevTransitionProps")," - Transitions props for the old screen."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isModal")," - Boolean specifying if screen is modal."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"onTransitionStart")," - Function to be invoked when the card transition animation is about to start."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"onTransitionEnd")," - Function to be invoked once the card transition animation completes.")),Object(r.b)("h3",{id:"navigationoptions-used-by-stacknavigator"},Object(r.b)("inlineCode",{parentName:"h3"},"navigationOptions")," used by ",Object(r.b)("inlineCode",{parentName:"h3"},"StackNavigator")),Object(r.b)("h4",{id:"title"},Object(r.b)("inlineCode",{parentName:"h4"},"title")),Object(r.b)("p",null,"String that can be used as a fallback for ",Object(r.b)("inlineCode",{parentName:"p"},"headerTitle"),". Additionally, will be used as a fallback for ",Object(r.b)("inlineCode",{parentName:"p"},"tabBarLabel")," (if nested in a TabNavigator) or ",Object(r.b)("inlineCode",{parentName:"p"},"drawerLabel")," (if nested in a DrawerNavigator)."),Object(r.b)("h4",{id:"header"},Object(r.b)("inlineCode",{parentName:"h4"},"header")),Object(r.b)("p",null,"React Element or a function that given ",Object(r.b)("inlineCode",{parentName:"p"},"HeaderProps")," returns a React Element, to display as a header. Setting to ",Object(r.b)("inlineCode",{parentName:"p"},"null")," hides header."),Object(r.b)("h4",{id:"headertitle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTitle")),Object(r.b)("p",null,"String, React Element or React Component used by the header. Defaults to scene ",Object(r.b)("inlineCode",{parentName:"p"},"title"),". When a component is used, it receives ",Object(r.b)("inlineCode",{parentName:"p"},"allowFontScaling"),", ",Object(r.b)("inlineCode",{parentName:"p"},"style")," and ",Object(r.b)("inlineCode",{parentName:"p"},"children")," props. The title string is passed in ",Object(r.b)("inlineCode",{parentName:"p"},"children"),"."),Object(r.b)("h4",{id:"headertitleallowfontscaling"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTitleAllowFontScaling")),Object(r.b)("p",null,"Whether header title font should scale to respect Text Size accessibility settings. Defaults to true."),Object(r.b)("h4",{id:"headerbackimage"},Object(r.b)("inlineCode",{parentName:"h4"},"headerBackImage")),Object(r.b)("p",null,"The image source (either a remote URL ",Object(r.b)("inlineCode",{parentName:"p"},"{{uri: 'path/to/image'}}")," or a local file resource ",Object(r.b)("inlineCode",{parentName:"p"},"{require('path/to/image')}"),") used by the back button.\nDefaults to ",Object(r.b)("inlineCode",{parentName:"p"},"react-navigation/views/assets/back-icon.png"),", which is the default back icon image for the platform (a chevron on iOS and an arrow on Android)."),Object(r.b)("h4",{id:"headerbacktitle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerBackTitle")),Object(r.b)("p",null,"Title string used by the back button on iOS, or ",Object(r.b)("inlineCode",{parentName:"p"},"null")," to disable label. Defaults to the previous scene's ",Object(r.b)("inlineCode",{parentName:"p"},"headerTitle"),"."),Object(r.b)("h4",{id:"headertruncatedbacktitle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTruncatedBackTitle")),Object(r.b)("p",null,"Title string used by the back button when ",Object(r.b)("inlineCode",{parentName:"p"},"headerBackTitle")," doesn't fit on the screen. ",Object(r.b)("inlineCode",{parentName:"p"},'"Back"')," by default."),Object(r.b)("h4",{id:"headerright"},Object(r.b)("inlineCode",{parentName:"h4"},"headerRight")),Object(r.b)("p",null,"React Element to display on the right side of the header."),Object(r.b)("h4",{id:"headerleft"},Object(r.b)("inlineCode",{parentName:"h4"},"headerLeft")),Object(r.b)("p",null,"React Element or Component to display on the left side of the header. When a component is used, it receives a number of props when rendered (",Object(r.b)("inlineCode",{parentName:"p"},"onPress"),", ",Object(r.b)("inlineCode",{parentName:"p"},"title"),", ",Object(r.b)("inlineCode",{parentName:"p"},"titleStyle")," and more - check ",Object(r.b)("inlineCode",{parentName:"p"},"Header.js")," for the complete list)."),Object(r.b)("h4",{id:"headerstyle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerStyle")),Object(r.b)("p",null,"Style object for the header"),Object(r.b)("h4",{id:"headerforceinset"},Object(r.b)("inlineCode",{parentName:"h4"},"headerForceInset")),Object(r.b)("p",null,"Allows to pass ",Object(r.b)("inlineCode",{parentName:"p"},"forceInset")," object to internal SafeAreaView used in the header."),Object(r.b)("h4",{id:"headertitlestyle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTitleStyle")),Object(r.b)("p",null,"Style object for the title component"),Object(r.b)("h4",{id:"headerbacktitlestyle"},Object(r.b)("inlineCode",{parentName:"h4"},"headerBackTitleStyle")),Object(r.b)("p",null,"Style object for the back title"),Object(r.b)("h4",{id:"headertintcolor"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTintColor")),Object(r.b)("p",null,"Tint color for the header"),Object(r.b)("h4",{id:"headerpresscolorandroid"},Object(r.b)("inlineCode",{parentName:"h4"},"headerPressColorAndroid")),Object(r.b)("p",null,"Color for material ripple (Android >= 5.0 only)"),Object(r.b)("h4",{id:"headertransparent"},Object(r.b)("inlineCode",{parentName:"h4"},"headerTransparent")),Object(r.b)("p",null,"Defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"false"),". If ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", the header will not have a background unless you explicitly provide it with ",Object(r.b)("inlineCode",{parentName:"p"},"headerStyle")," or ",Object(r.b)("inlineCode",{parentName:"p"},"headerBackground"),"."),Object(r.b)("h4",{id:"headerbackground"},Object(r.b)("inlineCode",{parentName:"h4"},"headerBackground")),Object(r.b)("p",null,"Use this with ",Object(r.b)("inlineCode",{parentName:"p"},"headerTransparent")," to provide a component to render in the background of the header. You can use this with a blur view, for example, to create a translucent header."),Object(r.b)("h4",{id:"gesturesenabled"},Object(r.b)("inlineCode",{parentName:"h4"},"gesturesEnabled")),Object(r.b)("p",null,"Whether you can use gestures to dismiss this screen. Defaults to true on iOS, false on Android."),Object(r.b)("h4",{id:"gestureresponsedistance"},Object(r.b)("inlineCode",{parentName:"h4"},"gestureResponseDistance")),Object(r.b)("p",null,"Object to override the distance of touch start from the edge of the screen to recognize gestures. It takes the following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"horizontal")," - ",Object(r.b)("em",{parentName:"li"},"number")," - Distance for horizontal direction. Defaults to 25."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"vertical")," - ",Object(r.b)("em",{parentName:"li"},"number")," - Distance for vertical direction. Defaults to 135.")),Object(r.b)("h4",{id:"gesturedirection"},Object(r.b)("inlineCode",{parentName:"h4"},"gestureDirection")),Object(r.b)("p",null,"String to override the direction for dismiss gesture. ",Object(r.b)("inlineCode",{parentName:"p"},"default")," for normal behaviour or ",Object(r.b)("inlineCode",{parentName:"p"},"inverted")," for right-to-left swipes."),Object(r.b)("h3",{id:"navigator-props"},"Navigator Props"),Object(r.b)("p",null,"The navigator component created by ",Object(r.b)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens, for example:")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const SomeStack = StackNavigator({\n  // config\n});\n\n<SomeStack\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")),Object(r.b)("h3",{id:"examples"},"Examples"),Object(r.b)("p",null,"See the examples ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/SimpleStack.js"}),"SimpleStack.js")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground/js/ModalStack.js"}),"ModalStack.js")," which you can run locally as part of the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-navigation/react-navigation/tree/1.x/examples/NavigationPlayground"}),"NavigationPlayground")," app."),Object(r.b)("p",null,"You can view these examples directly on your phone by visiting ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://exp.host/@react-navigation/NavigationPlayground"}),"our expo demo"),"."),Object(r.b)("h4",{id:"modal-stacknavigator-with-custom-screen-transitions"},"Modal StackNavigator with Custom Screen Transitions"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const ModalNavigator = StackNavigator(\n  {\n    Main: { screen: Main },\n    Login: { screen: Login },\n  },\n  {\n    headerMode: 'none',\n    mode: 'modal',\n    navigationOptions: {\n      gesturesEnabled: false,\n    },\n    transitionConfig: () => ({\n      transitionSpec: {\n        duration: 300,\n        easing: Easing.out(Easing.poly(4)),\n        timing: Animated.timing,\n      },\n      screenInterpolator: sceneProps => {\n        const { layout, position, scene } = sceneProps;\n        const { index } = scene;\n\n        const height = layout.initHeight;\n        const translateY = position.interpolate({\n          inputRange: [index - 1, index, index + 1],\n          outputRange: [height, 0, 0],\n        });\n\n        const opacity = position.interpolate({\n          inputRange: [index - 1, index - 0.99, index],\n          outputRange: [0, 1, 1],\n        });\n\n        return { opacity, transform: [{ translateY }] };\n      },\n    }),\n  }\n);\n")),Object(r.b)("p",null,"Header transitions can also be configured using ",Object(r.b)("inlineCode",{parentName:"p"},"headerLeftInterpolator"),", ",Object(r.b)("inlineCode",{parentName:"p"},"headerTitleInterpolator")," and ",Object(r.b)("inlineCode",{parentName:"p"},"headerRightInterpolator")," fields under ",Object(r.b)("inlineCode",{parentName:"p"},"transitionConfig"),"."),Object(r.b)("h2",{id:"navigator-props-1"},"Navigator props"),Object(r.b)("p",null,"The navigator component created by ",Object(r.b)("inlineCode",{parentName:"p"},"StackNavigator(...)")," takes the following props:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens and navigation options, for example:")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const StackNav = StackNavigator({\n  // config\n});\n\n<StackNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")))}s.isMDXComponent=!0},489:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var b=i.a.createContext({}),s=function(e){var t=i.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=s(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,u=p["".concat(o,".").concat(h)]||p[h]||d[h]||r;return n?i.a.createElement(u,c({ref:t},b,{components:n})):i.a.createElement(u,c({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var b=2;b<r;b++)o[b]=n[b];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);