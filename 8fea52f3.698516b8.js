(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{343:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(1),i=a(9),o=(a(0),a(489)),r={id:"tab-navigator",title:"TabNavigator reference",sidebar_label:"TabNavigator"},b={id:"version-1.x/tab-navigator",title:"TabNavigator reference",description:"```js",source:"@site/versioned_docs/version-1.x/tab-navigator.md",permalink:"/docs/1.x/tab-navigator",editUrl:"https://github.com/react-navigation/react-navigation.github.io/edit/source/versioned_docs/version-1.x/tab-navigator.md",version:"1.x",sidebar_label:"TabNavigator",sidebar:"api",previous:{title:"SwitchNavigator reference",permalink:"/docs/1.x/switch-navigator"},next:{title:"DrawerNavigator reference",permalink:"/docs/1.x/drawer-navigator"}},l=[{value:"RouteConfigs",id:"routeconfigs",children:[]},{value:"TabNavigatorConfig",id:"tabnavigatorconfig",children:[{value:"<code>tabBarOptions</code> for <code>TabBarBottom</code> (default tab bar on iOS)",id:"tabbaroptions-for-tabbarbottom-default-tab-bar-on-ios",children:[]},{value:"<code>tabBarOptions</code> for <code>TabBarTop</code> (default tab bar on Android)",id:"tabbaroptions-for-tabbartop-default-tab-bar-on-android",children:[]}]},{value:"<code>navigationOptions</code> used by <code>TabNavigator</code>",id:"navigationoptions-used-by-tabnavigator",children:[]},{value:"Navigator props",id:"navigator-props",children:[]}],c={rightToc:l};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"TabNavigator(RouteConfigs, TabNavigatorConfig)\n")),Object(o.b)("h2",{id:"routeconfigs"},"RouteConfigs"),Object(o.b)("p",null,"The route configs object is a mapping from route name to a route config, which tells the navigator what to present for that route, see ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/1.x/stack-navigator#routeconfigs"}),"example")," from ",Object(o.b)("inlineCode",{parentName:"p"},"StackNavigator"),"."),Object(o.b)("h2",{id:"tabnavigatorconfig"},"TabNavigatorConfig"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tabBarComponent")," - Component to use as the tab bar, e.g. ",Object(o.b)("inlineCode",{parentName:"li"},"TabBarBottom"),"\n(this is the default on iOS), ",Object(o.b)("inlineCode",{parentName:"li"},"TabBarTop"),"\n(this is the default on Android)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tabBarPosition")," - Position of the tab bar, can be ",Object(o.b)("inlineCode",{parentName:"li"},"'top'")," or ",Object(o.b)("inlineCode",{parentName:"li"},"'bottom'"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"swipeEnabled")," - Whether to allow swiping between tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"animationEnabled")," - Whether to animate when changing tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"lazy")," - Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),". If ",Object(o.b)("inlineCode",{parentName:"li"},"false"),", all tabs are rendered immediately. When ",Object(o.b)("inlineCode",{parentName:"li"},"true"),", tabs are rendered only when they are made active."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"removeClippedSubviews")," - Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"true"),". An optimization to reduce memory usage by freeing resources used by inactive tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"configureTransition")," - a function that, given ",Object(o.b)("inlineCode",{parentName:"li"},"currentTransitionProps")," and ",Object(o.b)("inlineCode",{parentName:"li"},"nextTransitionProps"),", returns a configuration object that describes the animation between tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"initialLayout")," - Optional object containing the initial ",Object(o.b)("inlineCode",{parentName:"li"},"height")," and ",Object(o.b)("inlineCode",{parentName:"li"},"width"),", can be passed to prevent the one frame delay in ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/react-native-community/react-native-tab-view#avoid-one-frame-delay"}),"react-native-tab-view")," rendering."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tabBarOptions")," - Configure the tab bar, see below.")),Object(o.b)("p",null,"Several options get passed to the underlying router to modify navigation logic:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"initialRouteName")," - The routeName for the initial tab route when first loading."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"order")," - Array of routeNames which defines the order of the tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"paths")," - Provide a mapping of routeName to path config, which overrides the paths set in the routeConfigs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"backBehavior")," - Should the back button cause a tab switch to the initial tab? If yes, set to ",Object(o.b)("inlineCode",{parentName:"li"},"initialRoute"),", otherwise ",Object(o.b)("inlineCode",{parentName:"li"},"none"),". Defaults to ",Object(o.b)("inlineCode",{parentName:"li"},"initialRoute")," behavior.")),Object(o.b)("h3",{id:"tabbaroptions-for-tabbarbottom-default-tab-bar-on-ios"},Object(o.b)("inlineCode",{parentName:"h3"},"tabBarOptions")," for ",Object(o.b)("inlineCode",{parentName:"h3"},"TabBarBottom")," (default tab bar on iOS)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"activeTintColor")," - Label and icon color of the active tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"activeBackgroundColor")," - Background color of the active tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"inactiveTintColor")," - Label and icon color of the inactive tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"inactiveBackgroundColor")," - Background color of the inactive tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"showLabel")," - Whether to show label for tab, default is true."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"style")," - Style object for the tab bar."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"labelStyle")," - Style object for the tab label."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tabStyle")," - Style object for the tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"allowFontScaling")," - Whether label font should scale to respect Text Size accessibility settings, default is true.")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"tabBarOptions: {\n  activeTintColor: '#e91e63',\n  labelStyle: {\n    fontSize: 12,\n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n")),Object(o.b)("h3",{id:"tabbaroptions-for-tabbartop-default-tab-bar-on-android"},Object(o.b)("inlineCode",{parentName:"h3"},"tabBarOptions")," for ",Object(o.b)("inlineCode",{parentName:"h3"},"TabBarTop")," (default tab bar on Android)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"activeTintColor")," - Label and icon color of the active tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"inactiveTintColor")," - Label and icon color of the inactive tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"showIcon")," - Whether to show icon for tab, default is false."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"showLabel")," - Whether to show label for tab, default is true."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"upperCaseLabel")," - Whether to make label uppercase, default is true."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"pressColor")," - Color for material ripple (Android >= 5.0 only)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"pressOpacity")," - Opacity for pressed tab (iOS and Android < 5.0 only)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"scrollEnabled")," - Whether to enable scrollable tabs."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"tabStyle")," - Style object for the tab."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"indicatorStyle")," - Style object for the tab indicator (line at the bottom of the tab)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"labelStyle")," - Style object for the tab label."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"iconStyle")," - Style object for the tab icon."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"style")," - Style object for the tab bar."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"allowFontScaling")," - Whether label font should scale to respect Text Size accessibility settings, default is true.")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"tabBarOptions: {\n  labelStyle: {\n    fontSize: 12,\n  },\n  tabStyle: {\n    width: 100,    \n  },\n  style: {\n    backgroundColor: 'blue',\n  },\n}\n")),Object(o.b)("h2",{id:"navigationoptions-used-by-tabnavigator"},Object(o.b)("inlineCode",{parentName:"h2"},"navigationOptions")," used by ",Object(o.b)("inlineCode",{parentName:"h2"},"TabNavigator")),Object(o.b)("h4",{id:"title"},Object(o.b)("inlineCode",{parentName:"h4"},"title")),Object(o.b)("p",null,"Generic title that can be used as a fallback for ",Object(o.b)("inlineCode",{parentName:"p"},"headerTitle")," and ",Object(o.b)("inlineCode",{parentName:"p"},"tabBarLabel"),"."),Object(o.b)("h4",{id:"tabbarvisible"},Object(o.b)("inlineCode",{parentName:"h4"},"tabBarVisible")),Object(o.b)("p",null,"True or false to show or hide the tab bar, if not set then defaults to true."),Object(o.b)("h4",{id:"swipeenabled"},Object(o.b)("inlineCode",{parentName:"h4"},"swipeEnabled")),Object(o.b)("p",null,"True or false to enable or disable swiping between tabs, if not set then defaults to TabNavigatorConfig option swipeEnabled."),Object(o.b)("h4",{id:"tabbaricon"},Object(o.b)("inlineCode",{parentName:"h4"},"tabBarIcon")),Object(o.b)("p",null,"React Element or a function that given ",Object(o.b)("inlineCode",{parentName:"p"},"{ focused: boolean, tintColor: string }")," returns a React.Node, to display in tab bar."),Object(o.b)("h4",{id:"tabbarlabel"},Object(o.b)("inlineCode",{parentName:"h4"},"tabBarLabel")),Object(o.b)("p",null,"Title string of a tab displayed in the tab bar or React Element or a function that given ",Object(o.b)("inlineCode",{parentName:"p"},"{ focused: boolean, tintColor: string }")," returns a React.Node, to display in tab bar. When undefined, scene ",Object(o.b)("inlineCode",{parentName:"p"},"title")," is used. To hide, see ",Object(o.b)("inlineCode",{parentName:"p"},"tabBarOptions.showLabel")," in the previous section."),Object(o.b)("h4",{id:"tabbaronpress"},Object(o.b)("inlineCode",{parentName:"h4"},"tabBarOnPress")),Object(o.b)("p",null,"Callback to handle tap events; the argument is an object containing:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"previousScene: { route, index }")," which is the scene we are leaving"),Object(o.b)("li",{parentName:"ul"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"scene: { route, index }")," that was tapped"),Object(o.b)("li",{parentName:"ul"},"the ",Object(o.b)("inlineCode",{parentName:"li"},"jumpToIndex")," method that can perform the navigation for you")),Object(o.b)("p",null,"Useful for adding a custom logic before the transition to the next scene (the tapped one) starts."),Object(o.b)("p",null,"Define this callback without ever invoking ",Object(o.b)("inlineCode",{parentName:"p"},"jumpToIndex")," to prevent any navigation from occurring."),Object(o.b)("h2",{id:"navigator-props"},"Navigator props"),Object(o.b)("p",null,"The navigator component created by ",Object(o.b)("inlineCode",{parentName:"p"},"TabNavigator(...)")," takes the following props:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"screenProps")," - Pass down extra options to child screens and navigation options, for example:")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const TabNav = TabNavigator({\n  // config\n});\n\n<TabNav\n  screenProps={/* this prop will get passed to the screen components as this.props.screenProps */}\n/>\n")))}p.isMDXComponent=!0},489:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):b({},t,{},e)),a},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,m=d["".concat(r,".").concat(u)]||d[u]||s[u]||o;return a?i.a.createElement(m,b({ref:t},c,{components:a})):i.a.createElement(m,b({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,r=new Array(o);r[0]=u;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:n,r[1]=b;for(var c=2;c<o;c++)r[c]=a[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);